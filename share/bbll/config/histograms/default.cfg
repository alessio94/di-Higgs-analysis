#####################
# Define histograms #
#####################

# event weight
TH1F('EventWeight'          , '', 50,    -5,    5) << ([MCWeight] * [PUWeight]  : "EventWeight"                         ) << (fillRaw=true);
TH1F('EventWeight_l'        , '', 50, -1000, 1000) << ([MCWeight] * [PUWeight]  : "EventWeight"                         ) << (fillRaw=true);

TH1F('Yield'                , '',  1,     0,    1) << (0.5                      : "Yield"                               );

# leptons
TH1F('SameFlavor'           , '',  2,  -0.5,  1.5) << ($(isSF)                   : "is same flavor"                      );
TH1F('NLeptons'             , '',  5,  -0.5,  4.5) << ($(NLeptons)               : "N^{leptons}"                         );
TH1F('DiLeptonMass'         , '', 24,     0,  120) << ($(DiLeptonMass)/1000.     : "m_{ll} [GeV]"                        );
TH1F('DiLeptonMass_l'       , '', 25,     0,  250) << ($(DiLeptonMass)/1000.     : "m_{ll} [GeV]"                        );
TH1F('DiLeptonMass_ll'      , '', 25,     0,  500) << ($(DiLeptonMass)/1000.     : "m_{ll} [GeV]"                        );
TH1F('DiLeptonPt'           , '', 30,     0,  300) << ($(DiLeptonPt)/1000.       : "p_{T}^{ll} [GeV]"                    );
TH1F('DiLeptonDeltaR'       , '', 25,     0,    5) << ($(DiLeptonDeltaR)         : "\#Delta R_{ll}"                      );
TH1F('DiLeptonDeltaEta'     , '', 25,    -5,    5) << ($(DiLeptonDeltaEta)       : "\#Delta\#eta_{ll}"                   );
TH1F('DiLeptonDeltaPhi'     , '', 30,  -3.2,  3.2) << ($(DiLeptonDeltaPhi)       : "\#Delta\#phi_{ll}"                   );
TH1F('DiLeptonDeltaPt'      , '', 20,     0,  200) << ($(DiLeptonDeltaPt)/1000.  : "\#Delta p_{T}^{ll} [GeV]"            );
TH1F('LeptonPt'             , '', 25,     0,  250) << ($(LeptonPt)/1000.         : "p_{T}^{l} [GeV]"                     );
TH1F('Lepton0Pt'            , '', 30,     0,  300) << ($(Lepton0Pt)/1000.        : "p_{T}^{l,lead} [GeV]"                );
TH1F('Lepton0Pt_p'          , '', 10,     0,  600) << ($(Lepton0Pt)/1000.        : "p_{T}^{l,lead} [GeV]"                );
TH1F('Lepton0Eta'           , '', 30,    -3,    3) << ($(Lepton0Eta)             : "\#eta^{l,lead}"                      );
TH1F('Lepton0Phi'           , '', 20,  -3.2,  3.2) << ($(Lepton0Phi)             : "\#phi^{l,lead}"                      );
TH1F('Lepton1Pt'            , '', 20,     0,  100) << ($(Lepton1Pt)/1000.        : "p_{T}^{l,sublead} [GeV]"             );
TH1F('Lepton1Pt_p'          , '', 22,     0,  330) << ($(Lepton1Pt)/1000.        : "p_{T}^{l,sublead} [GeV]"             );
TH1F('Lepton1Eta'           , '', 30,    -3,    3) << ($(Lepton1Eta)             : "\#eta^{l,sublead}"                   );
TH1F('Lepton1Phi'           , '', 20,  -3.2,  3.2) << ($(Lepton1Phi)             : "\#phi^{l,sublead}"                   );

TH1F('Lepton0d0sigBL'       , '', 20,    -8,    8) << ($(Lepton0d0sigBL)         : "d_{0}^{l,lead} sig."                 );
TH1F('Lepton0z0sinTheta'    , '', 20,  -0.5,  0.5) << ($(Lepton0z0sinTheta)      : "\#Delta z_{0}^{l,lead} sin \#theta [mm]");
TH1F('Lepton1d0sigBL'       , '', 20,    -8,    8) << ($(Lepton1d0sigBL)         : "d_{0}^{l,sublead} sig."              );
TH1F('Lepton1z0sinTheta'    , '', 20,  -0.5,  0.5) << ($(Lepton1z0sinTheta)      : "\#Delta z_{0}^{l,sublead} sin \#theta [mm]");
TH1F('Lepton0d0sigBLCorr'   , '', 20,    -8,    8) << ($(Lepton0d0sigBLCorr)     : "Corrected d_{0}^{l,lead} sig."       );
TH1F('Lepton0z0sinThetaCorr', '', 20,  -0.5,  0.5) << ($(Lepton0z0sinThetaCorr)  : "Corrected \#Delta z_{0}^{l,lead} sin \#theta [mm]");
TH1F('Lepton1d0sigBLCorr'   , '', 20,    -8,    8) << ($(Lepton1d0sigBLCorr)     : "Corrected d_{0}^{l,sublead} sig."    );
TH1F('Lepton1z0sinThetaCorr', '', 20,  -0.5,  0.5) << ($(Lepton1z0sinThetaCorr)  : "Corrected \#Delta z_{0}^{l,sublead} sin \#theta [mm]");
TH2F('Lepton0d0sigBL_vs_Lepton1d0sigBL', '', 16, -8, 8, 16, -8, 8) << ($(Lepton0d0sigBL): "d_{0}^{l,lead} sig.", $(Lepton1d0sigBL) : "d_{0}^{l,sublead} sig.");

TH1F('Lepton0MCTCOrigin'    , '', 46,  -0.5, 45.5) << ($(Lepton0MCTCOrigin)      : "MCTC Origin lep lead"                );
TH1F('Lepton0MCTCType'      , '', 39,  -0.5, 38.5) << ($(Lepton0MCTCType)        : "MCTC Type lep lead"                  );
TH1F('Lepton1MCTCOrigin'    , '', 46,  -0.5, 45.5) << ($(Lepton1MCTCOrigin)      : "MCTC Origin lep sublead"             );
TH1F('Lepton1MCTCType'      , '', 39,  -0.5, 38.5) << ($(Lepton1MCTCType)        : "MCTC Type lep sublead"               );

# all jets
TH1F('AllJetPt'             , '', 30,     0,  300) << ($(AllJetPt)/1000.         : "p_{T}^{j} [GeV]"                     );
TH1F('AllJetEta'            , '', 30,    -5,    5) << ($(AllJetEta)              : "\#eta^{j} [GeV]"                     );
TH1F('AllJetPhi'            , '', 30,  -3.2,  3.2) << ($(AllJetPhi)              : "\#phi^{j} [GeV]"                     );
TH1F('AllJet0Pt'            , '', 30 ,    0,  300) << ($(AllJet_0Pt)/1000.       : "p_{T}^{j,lead} [GeV]"                );
TH1F('AllJet0Eta'           , '', 30 ,   -5,    5) << ($(AllJet_0Eta)            : "\#eta^{j,lead}"                      );
TH1F('AllJet0Phi'           , '', 30 , -3.2,  3.2) << ($(AllJet_0Phi)            : "\#phi^{j,lead}"                      );
TH1F('AllJet1Pt'            , '', 30 ,    0,  300) << ($(AllJet_1Pt)/1000.       : "p_{T}^{j,sublead} [GeV]"             );
TH1F('AllJet1Eta'           , '', 30 ,   -5,    5) << ($(AllJet_1Eta)            : "\#eta^{j,sublead}"                   );
TH1F('AllJet1Phi'           , '', 30 , -3.2,  3.2) << ($(AllJet_1Phi)            : "\#phi^{j,sublead}"                   );

TH1F('AllJet0DL1rnn_pb'     , '', 50,     0,    1) << ($(AllJet0DL1rnn_pb)       : "DL1rnn_pb jet lead"                  );
TH1F('AllJet0DL1rnn_pc'     , '', 50,     0,    1) << ($(AllJet0DL1rnn_pc)       : "DL1rnn_pc jet lead"                  );
TH1F('AllJet0DL1rnn_pu'     , '', 50,     0,    1) << ($(AllJet0DL1rnn_pu)       : "DL1rnn_pu jet lead"                  );

TH1F('AllJet1DL1rnn_pb'     , '', 50,     0,    1) << ($(AllJet1DL1rnn_pb)       : "DL1rnn_pb jet sublead"               );
TH1F('AllJet1DL1rnn_pc'     , '', 50,     0,    1) << ($(AllJet1DL1rnn_pc)       : "DL1rnn_pc jet sublead"               );
TH1F('AllJet1DL1rnn_pu'     , '', 50,     0,    1) << ($(AllJet1DL1rnn_pu)       : "DL1rnn_pu jet sublead"               );

# other jets
TH1F('OtherJetPt'           , '', 30,     0,  300) << ($(OtherJetPt)/1000.       : "p_{T}^{j,other} [GeV]"               );
TH1F('OtherJetEta'          , '', 30,    -5,    5) << ($(OtherJetEta)            : "\#eta^{j,other} [GeV]"               );
TH1F('OtherJetPhi'          , '', 30,  -3.2,  3.2) << ($(OtherJetPhi)            : "\#phi^{j,other} [GeV]"               );

TH1F('OtherJet0TagWeight'   , '', 20,     0,    1) << ($(OtherJet0TagWeight)     : "tagweight other jet lead"            );
TH1F('OtherJet1TagWeight'   , '', 20,     0,    1) << ($(OtherJet1TagWeight)     : "tagweight other jet sublead"         );
TH1F('OtherJet2TagWeight'   , '', 20,     0,    1) << ($(OtherJet2TagWeight)     : "tagweight other jet third"           );

# central jets
TH1F('CentralJetPt'         , '', 30,     0,  300) << ($(CentralJetPt)/1000.     : "p_{T}^{j,central} [GeV]"             );
TH1F('CentralJetEta'        , '', 30,    -5,    5) << ($(CentralJetEta)          : "\#eta^{j,central} [GeV]"             );
TH1F('CentralJetPhi'        , '', 30,  -3.2,  3.2) << ($(CentralJetPhi)          : "\#phi^{j,central} [GeV]"             );

# forward jets
TH1F('ForwardJetPt'         , '', 20,     0,  200) << ($(ForwardJetPt)/1000.     : "p_{T}^{j,forward} [GeV]"             );
TH1F('ForwardJetEta'        , '', 30,    -5,    5) << ($(ForwardJetEta)          : "\#eta^{j,forward} [GeV]"             );
TH1F('ForwardJetPhi'        , '', 30,  -3.2,  3.2) << ($(ForwardJetPhi)          : "\#phi^{j,forward} [GeV]"             );

# b-jets
TH1F('BJetPt'               , '', 30,     0,  300) << ($(BJetPt)/1000.           : "p_{T}^{b} [GeV]"                     );
TH1F('BJetEta'              , '', 30,  -2.5,  2.5) << ($(BJetEta)                : "\#eta^{b} [GeV]"                     );
TH1F('BJetPhi'              , '', 30,  -3.2,  3.2) << ($(BJetPhi)                : "\#phi^{b} [GeV]"                     );
TH1F('BJet0Pt'              , '', 30,     0,  300) << ($(BJet0Pt)/1000.          : "p_{T}^{b,lead} [GeV]"                );
TH1F('BJet0Pt_p'            , '', 10,     0,  600) << ($(BJet0Pt)/1000.          : "p_{T}^{b,lead} [GeV]"                );
TH1F('BJet0Eta'             , '', 30,    -5,    5) << ($(BJet0Eta)               : "\#eta^{b,lead}"                      );
TH1F('BJet0Phi'             , '', 30,  -3.2,  3.2) << ($(BJet0Phi)               : "\#phi^{b,lead}"                      );
TH1F('BJetJet0TagWeight'    , '', 20,     0,    1) << ($(BJetJet0TagWeight)      : "tagweight b-jet lead"                );
TH1F('BJet1Pt'              , '', 30,     0,  300) << ($(BJet1Pt)/1000.          : "p_{T}^{b,sublead} [GeV]"             );
TH1F('BJet1Pt_p'            , '', 10,     0,  200) << ($(BJet1Pt)/1000.          : "p_{T}^{b,sublead} [GeV]"             );
TH1F('BJet1Eta'             , '', 30,    -5,    5) << ($(BJet1Eta)               : "\#eta^{b,sublead}"                   );
TH1F('BJet1Phi'             , '', 30,  -3.2,  3.2) << ($(BJet1Phi)               : "\#phi^{b,sublead}"                   );
TH1F('BJetJet1TagWeight'    , '', 20,     0,    1) << ($(BJetJet1TagWeight)      : "tagweight b-jet sublead"             );

TH1F('DiBJetMass'           , '', 20,     0,  400) << ($(DiBJetMass)/1000.       : "m_{bb} [GeV]"                        );
TH1F('DiBJetPt'             , '', 20,     0,  400) << ($(DiBJetPt)/1000.         : "p_{T}^{bb} [GeV]"                    );
TH1F('DiBJetDeltaR'         , '', 30,     0,    5) << ($(DiBJetDeltaR)           : "\#Delta R_{bb}"                      );
TH1F('DiBJetDeltaEta'       , '', 30,    -5,    5) << ($(DiBJetDeltaEta)         : "\#Delta\#eta_{bb}"                   );
TH1F('DiBJetDeltaPhi'       , '', 30,  -3.2,  3.2) << ($(DiBJetDeltaPhi)         : "\#Delta\#phi_{bb}"                   );
TH1F('DiBJetDeltaPt'        , '', 20,     0,  200) << ($(DiBJetDeltaPt)/1000.    : "\#Delta p_{T}^{bb} [GeV]"            );

# jet multiplicity
TH1F('NAllJets'             , '',  8,  -0.5,  7.5) << ($(NAllJets)               : "N_{jets,all}"                        );
TH1F('NOtherJets'           , '',  8,  -0.5,  7.5) << ($(NOtherJets)             : "N_{jets,other}"                      );
TH1F('NCentralJets'         , '',  8,  -0.5,  7.5) << ($(NCentralJets)           : "N_{jets,central}"                    );
TH1F('NForwardJets'         , '',  8,  -0.5,  7.5) << ($(NForwardJets)           : "N_{jets,forward}"                    );
TH1F('NBJets'               , '',  6,  -0.5,  5.5) << ($(NBJets)                 : "N_{b-jets}"                          );

# min/max DeltaR between b-jets and leptons
TH1F('BJet0Lepton0DeltaR'   , '', 25,     0,    5) << ($(BJet0Lepton0DeltaR)     : "\#Delta R_{b_{lead} l_{lead}}"       );
TH1F('BJet0Lepton1DeltaR'   , '', 25,     0,    5) << ($(BJet0Lepton1DeltaR)     : "\#Delta R_{b_{lead} l_{sublead}}"    );
TH1F('BJet1Lepton0DeltaR'   , '', 25,     0,    5) << ($(BJet1Lepton0DeltaR)     : "\#Delta R_{b_{sublead} l_{lead}}"    );
TH1F('BJet1Lepton1DeltaR'   , '', 25,     0,    5) << ($(BJet1Lepton1DeltaR)     : "\#Delta R_{b_{sublead} l_{sublead}}" );
TH1F('BJetLeptonDeltaRmin'  , '', 20,     0,    4) << ($(BJetLeptonDeltaRmin)    : "min \#Delta R_{b l}"                 );
TH1F('BJetLeptonDeltaRmin_large', '', 20, 0,    5) << ($(BJetLeptonDeltaRmin)    : "min \#Delta R_{b l}"                 );
TH1F('BJetLeptonDeltaRmax'  , '', 25,     0,    5) << ($(BJetLeptonDeltaRmax)    : "max \#Delta R_{b l}"                 );
TH1F('BJetLeptonDeltaRdiff' , '', 25,     0,    4) << ($(BJetLeptonDeltaRdiff)   : "max \#Delta R_{b l} - min \#Delta R_{b l}");

# Delta R/Eta/Phi between l0/l1 and closest jet
TH1F('DeltaRLepton0ClosestJet'   , '', 20,    0,   5) << ([DELTAR:lep0_jclosest]  : "\#Delta R(l_{lead},j_{closest})"       );
TH1F('DeltaRLepton1ClosestJet'   , '', 20,    0,   5) << ([DELTAR:lep1_jclosest]  : "\#Delta R(l_{sublead},j_{closest})"    );
TH1F('DeltaEtaLepton0ClosestJet' , '', 20, -3.5, 3.5) << ([DELTAETA:lep0_jclosest]: "\#Delta \#eta(l_{lead},j_{closest})"   );
TH1F('DeltaEtaLepton1ClosestJet' , '', 20, -3.5, 3.5) << ([DELTAETA:lep1_jclosest]: "\#Delta \#eta(l_{sublead},j_{closest})");
TH1F('DeltaPhiLepton0ClosestJet' , '', 30, -3.2, 3.2) << ([DELTAPHI:lep0_jclosest]: "\#Delta \#Phi(l_{lead},j_{closest})"   );
TH1F('DeltaPhiLepton1ClosestJet' , '', 30, -3.2, 3.2) << ([DELTAPHI:lep1_jclosest]: "\#Delta \#Phi(l_{sublead},j_{closest})");

# MMC
TH1F('MMC_fitstatus'        , '',  2,     0,    2) << ($(MMC_fitstatus)          : "MMC fit status"                      );
TH1F('MMC_maxw'             , '', 22,     0,  220) << ($(MMC_maxw)               : "m_{H}^{mmc,maxw} [GeV]"              );
TH1F('MMC_mlm'              , '', 22,     0,  220) << ($(MMC_mlm)                : "m_{H}^{mmc,mlm} [GeV]"               );
TH1F('MMC_mlnu3p'           , '', 22,     0,  220) << ($(MMC_mlnu3p)             : "m_{H}^{mmc,mlnu3p} [GeV]"            );

# MET
TH1F('MET_met'              , '', 20,     0,  400) << ($(MET_met)/1000.          : "E_{T}^{miss} [GeV]"                  );
TH1F('MET_sumet'            , '', 25,     0,  800) << ($(MET_sumet)/1000.        : "\#sum E_{T} [GeV]"                   );
TH1F('MET_metx'             , '', 15,  -150,  150) << ([MET:metx]/1000.          : "MET_{x} [GeV]"                       );
TH1F('MET_mety'             , '', 15,  -150,  150) << ([MET:mety]/1000.          : "MET_{y} [GeV]"                       );
TH1F('MET_metphi'           , '', 20,  -3.2,  3.2) << ([MET:metphi]              : "MET_{\#phi}"                         );
#TH1F('MET_metrho'           , '', 20,    -1,    1) << ([MET:metrho]              : "MET_{\#rho} [GeV]"                   );
TH1F('MET_metsig'           , '', 24,     0,   12) << ([MET:metsig]              : "MET sig."                            );
TH1F('MET_softmet'          , '', 10,     0,   50) << ([MET:soft_met]/1000.      : "Soft MET [GeV]"                      );
TH1F('MET_softsumet'        , '', 15,     0,  150) << ([MET:soft_sumet]/1000.    : "Soft \#sum E_{T} [GeV]"              );
TH1F('MET_softmetx'         , '', 12,   -30,   30) << ([MET:soft_metx]/1000.     : "Soft MET_{x} [GeV]"                  );
TH1F('MET_softmety'         , '', 12,   -30,   30) << ([MET:soft_mety]/1000.     : "Soft MET_{y} [GeV]"                  );
#TH1F('MET_softmetsig'       , '', 20,     0,   10) << ([MET:metsig_soft]         : "Soft MET sig."                       );
#TH1F('MET_hardmetsig'       , '', 20,     0,   10) << ([MET:metsig_hard]         : "Hard MET sig."                       );
TH1F('MET_rel'              , '', 20,      0, 400) << ([MET:rel]/1000.           : "E_{T}^{miss,rel} [GeV]"              );

# masses
TH1F('MT_Lepton0_MET'       , '', 20,     0,  200) << ($(MT_LEP0_MET)/1000.      : "m_{T}(l_{lead},MET) [GeV]"           );
TH1F('MT_Lepton1_MET'       , '', 20,     0,  200) << ($(MT_LEP1_MET)/1000.      : "m_{T}(l_{sublead},MET) [GeV]"        );
TH1F('MT_L_min'             , '', 20,     0,  200) << ($(MT_L_min)/1000.         : "m_{T,l}^{min} [GeV]"                 );
TH1F('MT_L_max'             , '', 20,     0,  200) << ($(MT_L_max)/1000.         : "m_{T,l}^{max} [GeV]"                 );
TH1F('MT_BJet0_MET'         , '', 20,     0,  200) << ($(MT_BJET0_MET)/1000.     : "m_{T}(b_{lead},MET) [GeV]"           );
TH1F('MT_BJet1_MET'         , '', 20,     0,  200) << ($(MT_BJET1_MET)/1000.     : "m_{T}(b_{sublead},MET) [GeV]"        );
TH1F('MT_B_min'             , '', 25,     0,  250) << ($(MT_B_min)/1000.         : "m_{T,b}^{min} [GeV]"                 );
TH1F('MT_B_max'             , '', 20,     0,  400) << ($(MT_B_max)/1000.         : "m_{T,b}^{max} [GeV]"                 );
TH1F('M_b0l0'               , '', 20,     0,  400) << ($(m_b0l0)/1000.          : "m_{b0l0} [GeV]"                       );
TH1F('M_b1l0'               , '', 20,     0,  400) << ($(m_b1l0)/1000.          : "m_{b1l0} [GeV]"                       );
TH1F('M_b0l1'               , '', 20,     0,  400) << ($(m_b0l1)/1000.          : "m_{b0l1} [GeV]"                       );
TH1F('M_b1l1'               , '', 20,     0,  400) << ($(m_b1l1)/1000.          : "m_{b1l1} [GeV]"                       );
TH1F('M_BL'                 , '', 20,     0,  400) << ($(M_BL)/1000.            : "m_{bl}^{minimax} [GeV]"               );
TH1F('MCT'                  , '', 20,     0,  400) << ($(MCT)/1000.             : "m_{CT}(bb) [GeV]"                     );
TH1F('MColl'                , '', 20,     0,  400) << ($(MColl)/1000.           : "m_{H}^{coll} [GeV]"                   );
TH1F('MColl_large'          , '', 25,  -100,  400) << ($(MColl)/1000.           : "m_{H}^{coll} [GeV]"                   );
TH1F('MHH'                  , '', 25,     0, 1000) << ([M_HH]/1000.             : "m_{HH} [GeV]"                         );
TH1F('DeltaPhi_H_H'         , '', 32,  -3.2,  3.2) << ([DPHI_HH]                : "\#Delta \#Phi(H,H)"                   );
TH1F('DeltaPhi_H_H_abs'     , '', 32,     0,  3.2) << (fabs([DPHI_HH])          : "|\#Delta \#Phi(H,H)|"                 );
TH1F('METPhiCentrality'     , '', 20,    -1,    1) << ([MET_PHI_CENTRALITY]     : "E_{T}^{miss} \#Phi Centrality"        );
TH1F('DeltaPhi_MET_LL'      , '', 32,  -3.2,  3.2) << ([DPHI_MET_LL]            : "\#Delta \#Phi(MET,ll)"                );
TH1F('DeltaPhi_MET_LL_abs'  , '', 32,     0,  3.2) << (fabs([DPHI_MET_LL])      : "|\#Delta \#Phi(MET,ll)|"              );
TH1F('DeltaPhi_METLL_BB'    , '', 32,  -3.2,  3.2) << ([DPHI_MET_LL_BB]         : "\#Delta \#Phi(MET+ll,bb)"             );
TH1F('DeltaPhi_METLL_BB_abs', '', 32,     0,  3.2) << (fabs([DPHI_MET_LL_BB])   : "|\#Delta \#Phi(MET+ll,bb)|"           );
TH1F('DeltaPt_MET_LL'       , '', 30,  -300,  300) << ([DPT_MET_LL]/1000.       : "\#Delta p_{T}(MET,ll)"                );
TH1F('DeltaPt_METLL_BB'     , '', 30,  -300,  300) << ([DPT_MET_LL_BB]/1000.    : "\#Delta p_{T}(MET+ll,bb)"             );
TH1F('Sum_MET_PtLL'         , '', 30,     0,  300) << ([SUM_MET_PTLL]/1000.     : "|MET + p_{T}^{ll}| [GeV]"             );
TH1F('HT2'                  , '', 25,     0, 1000) << ([HT2]/1000.              : "H_{T2} [GeV]"                         );
TH1F('HT2R'                 , '', 25,     0,    1) << ([HT2R]                   : "H_{T2}^{R}"                           );
TH1F('Sphericity'           , '', 25,     0,    1) << ([SPHERICITY]             : "Sphericity"                           );
TH1F('MT2_BB'               , '', 25,     0,  250) << ([MT2_BB]                 : "M_{T2}^{bb} [GeV]"                    );
TH1F('KLF_mtop'             , '', 20,     0,  400) << ($(KLF_mtop)              : "m_{top}^{KLF} [GeV]"                  );

# combined quantities
TH1F('PtBBLLScalar'         , '', 25,     0,  500) << ($(PtBBLLScalar)/1000.     : "p_{T}^{bbll,scalar} [GeV]"           );
TH1F('PtBBLLVector'         , '', 25,     0,  800) << ($(PtBBLLVector)/1000.     : "p_{T}^{bbll,vectorial} [GeV]"        );
TH1F('MBBLL'                , '', 25,     0,  800) << ($(MBBLL)/1000.            : "m_{bbll} [GeV]"                      );
TH1F('PtBBLLMETScalar'      , '', 25,     0,  800) << ($(PtBBLLMETScalar)/1000.  : "p_{T}^{bbllMET,scalar} [GeV]"        );
TH1F('PtBBLLMETVector'      , '', 25,     0,  800) << ($(PtBBLLMETVector)/1000.  : "p_{T}^{bbllMET,vectorial} [GeV]"     );
TH1F('MBBLLMET'             , '', 25,     0,  800) << ($(MBBLLMET)/1000.         : "m_{bbll,MET} [GeV]"                  );
TH1F('x0'                   , '', 30,    -2,    3) << ($(MColl_x0)               : "x_{0}"                               );
TH1F('x1'                   , '', 30,    -2,    3) << ($(MColl_x1)               : "x_{1}"                               );
TH1F('Weight2vScan'         , '', 20,     0,    1) << ([2vScan:weight]           : "w_{2\#nuSM}"                        );

# NNs
TH1F('NN_SR1_Signal'                 , '', 20,     0,    1) << (Filter($(NN_SR1_NodeSignal), $(NN_SR1_NodeSignal) < 0.30 || !$(isData) || $(isddFake)) : "Signal node");
TH1F('NN_SR1_Signal_Rebin'           , '', {0.0, 0.02, 0.05, 0.08, 0.12, 0.18, 0.26, 0.35, 0.46, 0.57, 0.67, 0.76, 0.83, 0.89, 0.93, 0.96, 1}) << (Filter($(NN_SR1_NodeSignal), $(NN_SR1_NodeSignal) < 0.26 || !$(isData) || $(isddFake)) : "Signal node (rebinned)");
TH1F('NN_SR1_Top'                    , '', 20,     0,    1) << (Filter($(NN_SR1_NodeTop),    $(NN_SR1_NodeTop)    > 0.35 || !$(isData) || $(isddFake)) : "Top node");
TH1F('NN_SR1_Other'                  , '', 20,     0,    1) << (Filter($(NN_SR1_NodeOther),  $(NN_SR1_NodeOther)  > 0.00 || !$(isData) || $(isddFake)) : "Other node");

TH1F('NN_SR1_Signal_noblind_ttbarcr' , '', {0.0, 0.01, 0.02, 0.04, 0.07, 0.12, 1}) << ($(NN_SR1_NodeSignal) : "Signal node");
TH1F('NN_SR1_Signal_noblind_wtcr'    , '', {0.0, 0.01, 0.02, 0.03, 0.05, 0.2, 1}) << ($(NN_SR1_NodeSignal) : "Signal node");
TH1F('NN_SR1_Signal_noblind_zllcr'   , '', {0.0, 0.01, 0.02, 0.03, 0.04, 1}) << ($(NN_SR1_NodeSignal) : "Signal node");
TH1F('NN_SR1_Top_noblind'            , '', 20,     0,    1) << ($(NN_SR1_NodeTop)   : "Top node");
TH1F('NN_SR1_Other_noblind'          , '', 20,     0,    1) << ($(NN_SR1_NodeOther) : "Other node");

TH1F('NN_SR2_Signal'                 , '', 20,     0,    1) << (Filter($(NN_SR2_NodeSignal), $(NN_SR2_NodeSignal) < 0.00 || !$(isData) || $(isddFake)) : "Signal node");
TH1F('NN_SR2_Signal_Rebin'           , '', {0.0, 0.01, 0.04, 0.08, 0.12, 0.17, 0.23, 0.32, 0.42, 0.52, 0.67, 1}) << (Filter($(NN_SR2_NodeSignal), $(NN_SR2_NodeSignal) < 0.01 || !$(isData) || $(isddFake)) : "Signal node (rebinned)");
TH1F('NN_SR2_Top'                    , '', 20,     0,    1) << (Filter($(NN_SR2_NodeTop),    $(NN_SR2_NodeTop)    > 0.00 || !$(isData) || $(isddFake)) : "Top node");
TH1F('NN_SR2_Zll'                    , '', 20,     0,    1) << (Filter($(NN_SR2_NodeZll),    $(NN_SR2_NodeZll)    > 0.00 || !$(isData) || $(isddFake)) : "Zll node");
TH1F('NN_SR2_Other'                  , '', 20,     0,    1) << (Filter($(NN_SR2_NodeOther),  $(NN_SR2_NodeOther)  > 0.20 || !$(isData) || $(isddFake)) : "Other node");

TH1F('NN_SR2_Signal_noblind_ttbarcr' , '', {0.0, 0.01, 0.02, 1}) << ($(NN_SR2_NodeSignal) : "Signal node");
TH1F('NN_SR2_Signal_noblind_wtcr'    , '', {0.0, 0.01, 0.02, 0.04, 1}) << ($(NN_SR2_NodeSignal) : "Signal node");
TH1F('NN_SR2_Signal_noblind_zllcr'   , '', {0.0, 0.01, 0.02, 0.04, 1}) << ($(NN_SR2_NodeSignal) : "Signal node");
TH1F('NN_SR2_Top_noblind'            , '', 20,     0,    1) << ($(NN_SR2_NodeTop) : "Top node");
TH1F('NN_SR2_Zll_noblind'            , '', 20,     0,    1) << ($(NN_SR2_NodeZll) : "Zll node");
TH1F('NN_SR2_Other_noblind'          , '', 20,     0,    1) << ($(NN_SR2_NodeOther) : "Other node");

# NN 2D plots
TH2F('NN_SR1_Signal_Rebin_vs_Lepton1Pt', '', {0.0, 0.02, 0.04, 0.07, 0.11, 0.17, 0.25, 0.35, 0.47, 0.58, 0.68, 0.76, 0.82, 0.87, 0.91, 0.94, 0.96, 1}, 20, 0, 100) << (Filter($(NN_SR1_NodeSignal), $(NN_SR1_NodeSignal) < 0.25 || !$(isData) || $(isddFake)) : "Signal node (rebinned)", $(Lepton1Pt)/1000.: "p_{T}^{l,sublead} [GeV]");

# VBF cross-checks
TH1F('VBFJet0Pt'                     , '', 30,     0,  300) << ($(VBFJet0Pt)/1000.      : "p_{T}^{VBF jet, lead} [GeV]");
TH1F('VBFJet1Pt'                     , '', 30,     0,  300) << ($(VBFJet1Pt)/1000.      : "p_{T}^{VBF jet, sublead} [GeV]");
TH1F('VBFMaxDeltaEtaJJ'              , '', 30,     0,   10) << ([VBF_MAX_DELTA_ETA_JJ]  : "max(\#Delta\#eta_{jj}^{VBF})");
TH1F('VBFMaxMJJ'                     , '', 30,     0, 3000) << ([VBF_MAX_MJJ]/1000.     : "max(m_{jj}^{VBF}) [GeV]");

# Pseudo-continuous b-tagging
TH1F("AllJetPCBTQuantile"   , '', 7,   -1.5,  5.5) << ($(AllJetPCBTQuantile)     : "j: pseudo continuous b-tagging quantile");
TH1F("AllJet0PCBTQuantile"  , '', 7,   -1.5,  5.5) << ($(AllJet0PCBTQuantile)    : "j^{lead}: pseudo continuous b-tagging quantile");
TH1F("AllJet1PCBTQuantile"  , '', 7,   -1.5,  5.5) << ($(AllJet1PCBTQuantile)    : "j^{sublead}: pseudo continuous b-tagging quantile");
TH1F("BJet0PCBTQuantile"    , '', 7,   -1.5,  5.5) << ($(BJet0PCBTQuantile)      : "b^{lead}: pseudo continuous b-tagging quantile");
TH1F("BJet1PCBTQuantile"    , '', 7,   -1.5,  5.5) << ($(BJet1PCBTQuantile)      : "b^{sublead}: pseudo continuous b-tagging quantile");

# PRW checks
# naming scheme: PRW_data_<mu-type>_mc_<mu-type>_<weight>
TH1F('PRW_data_avg_mc_avg_nopuweight'       , '', 30, 0, 60) << ($(ActualAvgMu)                                            : "MC: <\#mu> vs. Data: <\#mu>" )                               << (weightExpression="[PUWeight]");
TH1F('PRW_data_avgcorr_mc_avg_nopuweight'   , '', 30, 0, 60) << (($(isMC) ? $(ActualAvgMu) : $(CorrectedAndScaledAvgMu))   : "MC: <\#mu> vs. Data: <\#mu>^{corr,scale}" )                  << (weightExpression="[PUWeight]");
TH1F('PRW_data_avg_mc_avg_withpuweight'     , '', 30, 0, 60) << ($(ActualAvgMu)                                            : "MC: <\#mu> vs. Data: <\#mu> (with PU weight)" );
TH1F('PRW_data_avgcorr_mc_avg_withpuweight' , '', 30, 0, 60) << (($(isMC) ? $(ActualAvgMu) : $(CorrectedAndScaledAvgMu))   : "MC: <\#mu> vs. Data: <\#mu>^{corr,scale} (with PU weight)" );
TH1F('PRW_data_act_mc_act_nopuweight'       , '', 30, 0, 60) << ($(ActualMu)                                               : "MC: \#mu vs. Data: \#mu" )                                   << (weightExpression="[PUWeight]");
TH1F('PRW_data_actcorr_mc_act_nopuweight'   , '', 30, 0, 60) << (($(isMC) ? $(ActualMu) : $(CorrectedAndScaledMu))         : "MC: \#mu vs. Data: \#mu^{corr,scale}" )                      << (weightExpression="[PUWeight]");
TH1F('PRW_data_act_mc_act_withpuweight'     , '', 30, 0, 60) << ($(ActualMu)                                               : "MC: \#mu vs. Data: \#mu (with PU weight)" );
TH1F('PRW_data_actcorr_mc_act_withpuweight' , '', 30, 0, 60) << (($(isMC) ? $(ActualMu) : $(CorrectedAndScaledMu))         : "MC: \#mu vs. Data: \#mu^{corr,scale} (with PU weight)" );
TH1F('PRW_NVertex_nopuweight'               , '', 30, 0, 60) << ($(NVertex)                                                : "N_{Vertex}");
TH1F('PRW_NVertex_withpuweight'             , '', 30, 0, 60) << ($(NVertex)                                                : "N_{Vertex} (with PU weight)")                                << (weightExpression="[PUWeight]");

# vertex info
TH1F('NVertex'              , '', 30,     0,   60) << ($(NVertex)                : "N_{Vertex}"                          );
TH1F('ZPV'                  , '', 50,  -200,  200) << ($(ZPV)                    : "z_{PV}"                              );

# trigger
TH1F('Trigger'              , '', 60,     0,   60) << ($(Trigger)                : "Trigger"                             );

# scale factors
TH2F('SFTrigger', '', 20, 0, 200, 20, 0, 1) << ($(Lepton0Pt)/1000. : "p_{T}^{l,lead} [GeV]", $(TriggerSF) : "Trigger SF");

# truth studies
TH1F('NTruthLeptons'        , '',  5,  -0.5,  4.5) << ([NTruthLeptons]           : "N^{leptons,truth}"                  );
TH1F('CodeTTBarDecay'       , '', 11,  -1.5,  9.5) << ([CodeTTBarDecay]          : "codeTTBarDecay"                     );
TH1F('TruthMhh'             , '', 25,     0,  800) << ([TruthMhh]/1000.          : "m_{hh}^{truth}"                     );

###################
# Book histograms #
###################

@CutBaseChannelSplit: EventWeight, EventWeight_l;

# PRW checks
#@CutNoPUWeight: PRW_data_avg_mc_avg_nopuweight, PRW_data_avgcorr_mc_avg_nopuweight, PRW_data_avg_mc_avg_withpuweight, PRW_data_avgcorr_mc_avg_withpuweight;
#@CutNoPUWeight: PRW_data_act_mc_act_nopuweight, PRW_data_actcorr_mc_act_nopuweight, PRW_data_act_mc_act_withpuweight, PRW_data_actcorr_mc_act_withpuweight;
#@CutNoPUWeight: PRW_NVertex_nopuweight, PRW_NVertex_withpuweight;

@CutNBJets2/*: Yield;
@CutNBJets2/*: DiLeptonMass, DiLeptonMass_l, DiLeptonMass_ll, DiLeptonPt, DiLeptonDeltaR, DiLeptonDeltaEta, DiLeptonDeltaPhi, DiLeptonDeltaPt, LeptonPt, Lepton0Pt, Lepton0Eta, Lepton0Phi, Lepton1Pt, Lepton1Eta, Lepton1Phi, NLeptons, SameFlavor;
@CutNBJets2/*: Lepton0d0sigBL, Lepton0z0sinTheta, Lepton1d0sigBL, Lepton1z0sinTheta, Lepton0d0sigBL_vs_Lepton1d0sigBL;
#@CutNBJets2/*: Lepton0d0sigBLCorr, Lepton0z0sinThetaCorr, Lepton1d0sigBLCorr, Lepton1z0sinThetaCorr;
#@CutNBJets2/*: Lepton0MCTCOrigin, Lepton0MCTCType, Lepton1MCTCOrigin, Lepton1MCTCType;
@CutNBJets2/*: MMC_fitstatus, MMC_maxw, MMC_mlm, MMC_mlnu3p;
@CutNBJets2/*: MET_met, MET_sumet, MET_metx, MET_mety, MET_metphi, MET_metsig, MET_softmet, MET_softsumet, MET_softmetx, MET_softmety, MET_rel;
@CutNBJets2/*: MT_Lepton0_MET, MT_Lepton1_MET, MT_L_min, MT_L_max, MT_BJet0_MET, MT_BJet1_MET, MT_B_min, MT_B_max, M_BL, MColl, MColl_large, x0, x1;
@CutNBJets2/*: DeltaRLepton0ClosestJet, DeltaRLepton1ClosestJet, DeltaEtaLepton0ClosestJet, DeltaEtaLepton1ClosestJet, DeltaPhiLepton0ClosestJet, DeltaPhiLepton1ClosestJet;
@CutNBJets2/*: M_b0l0, M_b1l0, M_b0l1, M_b1l1;
#@CutNBJets2/*: NVertex, ZPV;
@CutNBJets2/*: Trigger;
#@CutNBJets2/*: Trigger, SFTrigger;
#@CutNBJets2/*: NTruthLeptons, CodeTTBarDecay;
#@CutNBJets2/*: TruthMhh;

@CutNBJets2/*: NAllJets, NOtherJets, NCentralJets, NForwardJets, NBJets;
#@CutNBJets2/*: AllJetPt, AllJetEta, AllJetPhi, OtherJetPt, OtherJetEta, OtherJetPhi, CentralJetPt, CentralJetEta, CentralJetPhi, ForwardJetPt, ForwardJetEta, ForwardJetPhi;
#@CutNBJets2/*: OtherJet0TagWeight, OtherJet1TagWeight, OtherJet2TagWeight;

#@CutBase/*: BJetPt, BJetEta, BJetPhi;
@CutNBJets2/*: BJet0Pt, BJet0Eta, BJet0Phi, BJet1Pt, BJet1Eta, BJet1Phi, DiBJetMass, DiBJetPt, DiBJetDeltaR, DiBJetDeltaEta, DiBJetDeltaPhi, DiBJetDeltaPt;
@CutNBJets2/*: BJet0Lepton0DeltaR, BJet0Lepton1DeltaR, BJet1Lepton0DeltaR, BJet1Lepton1DeltaR, BJetLeptonDeltaRmin, BJetLeptonDeltaRmin_large, BJetLeptonDeltaRmax, BJetLeptonDeltaRdiff;
@CutNBJets2/*: MCT, PtBBLLScalar, PtBBLLVector, MBBLL, PtBBLLMETScalar, PtBBLLMETVector, MBBLLMET;
@CutNBJets2/*: MHH, DeltaPhi_H_H, DeltaPhi_H_H_abs, METPhiCentrality, DeltaPhi_MET_LL, DeltaPhi_MET_LL_abs, DeltaPhi_METLL_BB, DeltaPhi_METLL_BB_abs, DeltaPt_MET_LL, DeltaPt_METLL_BB, Sum_MET_PtLL, HT2, HT2R, Sphericity, MT2_BB, KLF_mtop;

#@CutNBJets2/*: Lepton0Pt_p, Lepton1Pt_p, BJet0Pt_p, BJet1Pt_p;

#@CutOS/*: AllJet0Pt, AllJet0Eta, AllJet0Phi, AllJet1Pt, AllJet1Eta, AllJet1Phi;

#@CutOS/*: AllJetPCBTQuantile;
#@CutNJets2Plus/*: AllJet0PCBTQuantile, AllJet1PCBTQuantile;
#@CutNBJets2/*: BJet0PCBTQuantile, BJet1PCBTQuantile;

@Cut2TagMllSR1/*:   NN_SR1_Signal, NN_SR1_Signal_Rebin, NN_SR1_Top, NN_SR1_Other, NN_SR1_Signal_Rebin_vs_Lepton1Pt;
@Cut2TagMbbSR2:     NN_SR2_Signal, NN_SR2_Signal_Rebin, NN_SR2_Top, NN_SR2_Zll, NN_SR2_Other;
@Cut2TagMBLTTbarCR: NN_SR1_Signal_noblind_ttbarcr, NN_SR1_Top_noblind, NN_SR1_Other_noblind, NN_SR2_Signal_noblind_ttbarcr, NN_SR2_Top_noblind, NN_SR2_Zll_noblind, NN_SR2_Other;
@Cut2TagMBLWtCR:    NN_SR1_Signal_noblind_wtcr, NN_SR1_Top_noblind, NN_SR1_Other_noblind, NN_SR2_Signal_noblind_wtcr, NN_SR2_Top_noblind, NN_SR2_Zll_noblind, NN_SR2_Other;
@Cut2TagMbbZllCR:   NN_SR1_Signal_noblind_zllcr, NN_SR1_Top_noblind, NN_SR1_Other_noblind, NN_SR2_Signal_noblind_zllcr, NN_SR2_Top_noblind, NN_SR2_Zll_noblind, NN_SR2_Other;

@Cut2TagMllSR1/*:   VBFJet0Pt, VBFJet1Pt, VBFMaxDeltaEtaJJ, VBFMaxMJJ;

#@Cut2TagMllSR1/*:     Weight2vScan;
#@Cut2TagMbbSR2:       Weight2vScan;
