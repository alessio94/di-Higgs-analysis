common:
    int process_id                          << $(processID),
    int vbf_veto                            << $(VBFVeto),
    int is_sf                               << $(isSF),
    int is_ee                               << $(isEE),
    int is_em                               << $(isEM),
    int n_jets                              << $(NAllJets),
    float lept_0_pt                         << $(Lepton0Pt)/1000.,
    float lept_1_pt                         << $(Lepton1Pt)/1000.,
    float bjet_0_pt                         << $(BJet0Pt)/1000.,
    float bjet_1_pt                         << $(BJet1Pt)/1000.,
    float ll_m                              << $(DiLeptonMass)/1000.,
    float ll_pt                             << $(DiLeptonPt)/1000.,
    float ll_deltar                         << $(DiLeptonDeltaR),
    float bb_m                              << $(DiBJetMass)/1000.,
    float bb_pt                             << $(DiBJetPt)/1000.,
    float bb_deltar                         << $(DiBJetDeltaR),
    float met_met                           << $(MET_met)/1000.,
    float met_sig                           << [MET:metsig],
    float ht2r                              << [HT2R],
    float m_t2_bb                           << [MT2_BB],
    float mt_lep0_met                       << $(MT_LEP0_MET)/1000.,
    float mt_lep1_met                       << $(MT_LEP1_MET)/1000.,
    float mt_l_min                          << $(MT_L_min)/1000.,
    float deltar_min_bl                     << $(BJetLeptonDeltaRmin),
    float m_bbll                            << $(MBBLL)/1000.,
    float m_bbllmet                         << $(MBBLLMET)/1000.,
    float m_bl                              << $(M_BL)/1000.,
    float mt_b_min                          << $(MT_B_min)/1000.,
    float sum_met_ptll                      << [SUM_MET_PTLL]/1000.,
    int yield                               << 1,
    float fake_weight_nom                   << [ddFakeWeight],
    float fake_weight_stat_up_bin_0         << [ddFakeWeight:FAKE_STAT_UP_BIN_0],
    float fake_weight_stat_up_bin_1         << [ddFakeWeight:FAKE_STAT_UP_BIN_1],
    float fake_weight_stat_up_bin_2         << [ddFakeWeight:FAKE_STAT_UP_BIN_2],
    float fake_weight_stat_up_bin_3         << [ddFakeWeight:FAKE_STAT_UP_BIN_3],
    float fake_weight_stat_up_bin_4         << [ddFakeWeight:FAKE_STAT_UP_BIN_4],
    float fake_weight_stat_up_bin_5         << [ddFakeWeight:FAKE_STAT_UP_BIN_5],
    float fake_weight_stat_up_bin_6         << [ddFakeWeight:FAKE_STAT_UP_BIN_6],
    float fake_weight_stat_up_bin_7         << [ddFakeWeight:FAKE_STAT_UP_BIN_7],
    float fake_weight_stat_up_bin_8         << [ddFakeWeight:FAKE_STAT_UP_BIN_8],
    float fake_weight_stat_up_bin_9         << [ddFakeWeight:FAKE_STAT_UP_BIN_9],
    float fake_weight_stat_up_bin_10        << [ddFakeWeight:FAKE_STAT_UP_BIN_10],
    float fake_weight_stat_down_bin_0       << [ddFakeWeight:FAKE_STAT_DOWN_BIN_0],
    float fake_weight_stat_down_bin_1       << [ddFakeWeight:FAKE_STAT_DOWN_BIN_1],
    float fake_weight_stat_down_bin_2       << [ddFakeWeight:FAKE_STAT_DOWN_BIN_2],
    float fake_weight_stat_down_bin_3       << [ddFakeWeight:FAKE_STAT_DOWN_BIN_3],
    float fake_weight_stat_down_bin_4       << [ddFakeWeight:FAKE_STAT_DOWN_BIN_4],
    float fake_weight_stat_down_bin_5       << [ddFakeWeight:FAKE_STAT_DOWN_BIN_5],
    float fake_weight_stat_down_bin_6       << [ddFakeWeight:FAKE_STAT_DOWN_BIN_6],
    float fake_weight_stat_down_bin_7       << [ddFakeWeight:FAKE_STAT_DOWN_BIN_7],
    float fake_weight_stat_down_bin_8       << [ddFakeWeight:FAKE_STAT_DOWN_BIN_8],
    float fake_weight_stat_down_bin_9       << [ddFakeWeight:FAKE_STAT_DOWN_BIN_9],
    float fake_weight_stat_down_bin_10      << [ddFakeWeight:FAKE_STAT_DOWN_BIN_10],
    float fake_weight_gen_up                << [ddFakeWeight:FAKE_GEN_UP],
    float fake_weight_gen_down              << [ddFakeWeight:FAKE_GEN_DOWN];


sr1:
    float nn_sr1_signal             << $(NN_SR1_NodeSignal),
    float nn_sr1_top                << $(NN_SR1_NodeTop),
    float nn_sr1_other              << $(NN_SR1_NodeOther),
    float nn_sr1_kl10_signal        << $(NN_SR1_KL10_NodeSignal),
    float nn_sr1_kl10_top           << $(NN_SR1_KL10_NodeTop),
    float nn_sr1_kl10_other         << $(NN_SR1_KL10_NodeOther),
    float nn_sr2_signal             << 0,
    float nn_sr2_top                << 0,
    float nn_sr2_zll                << 0,
    float nn_sr2_other              << 0,
    float nn_sr2_kl10_signal        << 0,
    float nn_sr2_kl10_top           << 0,
    float nn_sr2_kl10_zll           << 0,
    float nn_sr2_kl10_other         << 0;


sr2:
    float nn_sr1_signal             << 0,
    float nn_sr1_top                << 0,
    float nn_sr1_other              << 0,
    float nn_sr1_kl10_signal        << 0,
    float nn_sr1_kl10_top           << 0,
    float nn_sr1_kl10_other         << 0,
    float nn_sr2_signal             << $(NN_SR2_NodeSignal),
    float nn_sr2_top                << $(NN_SR2_NodeTop),
    float nn_sr2_zll                << $(NN_SR2_NodeZll),
    float nn_sr2_other              << $(NN_SR2_NodeOther),
    float nn_sr2_kl10_signal        << $(NN_SR2_KL10_NodeSignal),
    float nn_sr2_kl10_top           << $(NN_SR2_KL10_NodeTop),
    float nn_sr2_kl10_zll           << $(NN_SR2_KL10_NodeZll),
    float nn_sr2_kl10_other         << $(NN_SR2_KL10_NodeOther);


cr:
    float nn_sr1_signal             << $(NN_SR1_NodeSignal),
    float nn_sr1_top                << $(NN_SR1_NodeTop),
    float nn_sr1_other              << $(NN_SR1_NodeOther),
    float nn_sr1_kl10_signal        << $(NN_SR1_KL10_NodeSignal),
    float nn_sr1_kl10_top           << $(NN_SR1_KL10_NodeTop),
    float nn_sr1_kl10_other         << $(NN_SR1_KL10_NodeOther),
    float nn_sr2_signal             << $(NN_SR2_NodeSignal),
    float nn_sr2_top                << $(NN_SR2_NodeTop),
    float nn_sr2_zll                << $(NN_SR2_NodeZll),
    float nn_sr2_other              << $(NN_SR2_NodeOther),
    float nn_sr2_kl10_signal        << $(NN_SR2_KL10_NodeSignal),
    float nn_sr2_kl10_top           << $(NN_SR2_KL10_NodeTop),
    float nn_sr2_kl10_zll           << $(NN_SR2_KL10_NodeZll),
    float nn_sr2_kl10_other         << $(NN_SR2_KL10_NodeOther);


@Cut2TagMllSR1VBFVeto: common >> data/ntup/unmerged/systematics/$(jobID)_SR1VBFVeto.root:$(ntupleTreeName)
@Cut2TagMllSR1VBFVeto: sr1    >> data/ntup/unmerged/systematics/$(jobID)_SR1VBFVeto.root:$(ntupleTreeName)
@Cut2TagMbbSR2:        common >> data/ntup/unmerged/systematics/$(jobID)_SR2.root:$(ntupleTreeName)
@Cut2TagMbbSR2:        sr2    >> data/ntup/unmerged/systematics/$(jobID)_SR2.root:$(ntupleTreeName)
@Cut2TagMllTopCR:      common >> data/ntup/unmerged/systematics/$(jobID)_TopCR.root:$(ntupleTreeName)
@Cut2TagMllTopCR:      cr     >> data/ntup/unmerged/systematics/$(jobID)_TopCR.root:$(ntupleTreeName)
@Cut2TagMbbZllCR:      common >> data/ntup/unmerged/systematics/$(jobID)_ZllCR.root:$(ntupleTreeName)
@Cut2TagMbbZllCR:      cr     >> data/ntup/unmerged/systematics/$(jobID)_ZllCR.root:$(ntupleTreeName)
